package cli;

import domain.Account;
import domain.Transaction;
import service.BankService;
import java.util.*;

//–ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É –¥–µ–π—Å—Ç–≤–∏–π Map<Integer, Runnable>
public class Main {
    private static final Scanner in = new Scanner(System.in);

    public static void main(String[] args)
    {
        BankService svc = new BankService();
        svc.loadData(); // –ø–æ–¥—Ç—è–Ω–µ–º –ø—Ä–æ—à–ª—ã–µ —Å–µ—Å—Å–∏–∏
        // LinkedHashMap —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –±—É–¥–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
        Map<Integer, Runnable> actions = new LinkedHashMap<>();

        actions.put(1, () ->
        {
            System.out.print("–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞: ");
            String owner = in.nextLine().trim();
            try
            {
                Account a = svc.createAccount(owner);
                System.out.println("\n–°—á—ë—Ç —Å–æ–∑–¥–∞–Ω\n" + a);
            }
            catch (Exception e)
            {
                System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
            }
        });

        actions.put(2, () ->
        {
            System.out.print("–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: ");
            String num = in.nextLine().trim();
            System.out.print("–°—É–º–º–∞: ");
            String s = in.nextLine().trim();
            if (!s.matches("\\d+"))
            {
                System.out.println("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.");
                return;
            }
            try
            {
                long bal = svc.deposit(num, Long.parseLong(s));
                System.out.println("\n–£—Å–ø—à–µ–Ω–æ–µ –ø–æ–ø–æ–ª–µ–Ω–µ–Ω–∏–µ\n" + "–ë–∞–ª–∞–Ω—Å: " + bal + " RUB");
            } catch (Exception e)
            {
                System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
            }
        });

        actions.put(3, () ->
        {
            System.out.print("–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: ");
            String num = in.nextLine().trim();
            System.out.print("–°—É–º–º–∞: ");
            String s = in.nextLine().trim();
            if (!s.matches("\\d+"))
            {
                System.out.println("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.");
                return;
            }
            try
            {
                long bal = svc.withdraw(num, Long.parseLong(s));
                System.out.println("\n–£—Å–ø–µ–µ–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ\n" +"–ë–∞–ª–∞–Ω—Å: " + bal + " RUB");
            } catch (Exception e)
            {
                System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
            }
        });

        actions.put(4, () ->
        {
            System.out.print("–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: ");
            String num = in.nextLine().trim();
            try
            {
                System.out.println("–ë–∞–ª–∞–Ω—Å: " + svc.getBalance(num) + " RUB");
            } catch (Exception e)
            {
                System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
            }
        });

        actions.put(5, () ->
        {
            System.out.print("–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: ");
            String num = in.nextLine().trim();
            try
            {
                List<Transaction> list = svc.listTransactions(num);
                list.forEach(t -> System.out.println(t + "\n"));
            }
            catch (Exception e)
            {
                System.out.println("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
            }
        });

        actions.put(6, () ->
        {
            System.out.print("–ó–∞–ø—Ä–æ—Å (–Ω–æ–º–µ—Ä/–ë–ò–ö/–ö–ü–ü/–§–ò–û): ");
            String q = in.nextLine();
            try
            {
                List<Account> res = svc.search(q);
                res.forEach(a -> System.out.println(a + "\n"));
            }
            catch (Exception e)
            {
                System.out.println("–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
        });

        actions.put(7, () ->
        {
            svc.saveData(); // —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥–µ
            System.out.println("üëã –í—ã—Ö–æ–¥");
            System.exit(0);
        });

        // —á–∏—Ç–∞–µ–º –≤–≤–æ–¥ –∏ –∏—Å–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        showMenu();
        while (true)
        {
            System.out.print("\n–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é (0 - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é): ");
            String raw = in.nextLine().trim();

            if (raw.equals("0"))
            { // –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –º–µ–Ω—é –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
                showMenu();
                continue;
            }

            try
            {
                int selection = Integer.parseInt(raw); // –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, —Ç–æ –≤—ã–ª–µ–∑–µ—Ç catch
                Runnable action = actions.get(selection); // –¥–æ—Å—Ç–∞—ë–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É
                if (action != null)
                {
                    action.run();
                }
                else
                {
                    System.out.println("–¢–∞–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–µ—Ç");
                }
            } catch (NumberFormatException e)
            {
                System.out.println("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ " + actions.size());
            }
        }
    }

    private static void showMenu()

    {
        System.out.println("1. –û—Ç–∫—Ä—ã—Ç—å —Å—á—ë—Ç");
        System.out.println("2. –ü–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏");
        System.out.println("3. –°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏");
        System.out.println("4. –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å");
        System.out.println("5. –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
        System.out.println("6. –ü–æ–∏—Å–∫ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º");
        System.out.println("7. –í—ã—Ö–æ–¥");
    }
}